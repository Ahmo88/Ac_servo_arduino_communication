using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using CommandMessenger;
using CommandMessenger.TransportLayer;
using System.Threading;
using System.IO;

namespace Servo
{
    public partial class lvKulma : Form
    {
        enum Command
        {
            paljenjeServa,
            gasenjeServa,
            brzina1,
            brzina2,
            brzina3,
            manualBrzina,
            pozicija1,
            pozicija2,
            idi,
            homePozicija,
            parametarVisual,
            vrijednostVisual,
            trenutnaPozicija,
            okidacTrenutnePozicije,
            trenutnaPozicija2,
            stani,
            gore,
            goreStani,
            dole,
            doleStani,
            homeOn,
        };



        private SerialTransport _serialTransport;
        private CmdMessenger _cmdMessenger;

        int izaberi1;
        int izaberi2;
        int izaberi3;
        int izaberi4;
        int poz1;
        int poz2;
        int pomjeri1;
        int pomjeri2;

        int idiGore = 0;
        int staniGore = 0;
        int idiDole = 0;
        int staniDole = 0;



        //  int x;

        TextBox selTB = null;
        //  Thread t;



        public lvKulma()
        {
            InitializeComponent();

            _cmdMessenger = Inicijalizacija._cmdMessenger;
            _serialTransport = Inicijalizacija._serialTransport;
            AttachCommandCallBacks();
            // Start listening
            _cmdMessenger.StartListening();

            textBox1.Enter += tb_Enter;
            textBox2.Enter += tb_Enter;
            textBox3.Enter += tb_Enter;
            textBox4.Enter += tb_Enter;
            textBox5.Enter += tb_Enter;
            textBoxBrzina.Enter += tb_Enter;

        }



        private void AttachCommandCallBacks()
        {

            _cmdMessenger.Attach((int)Command.trenutnaPozicija, trPozicija);
            _cmdMessenger.Attach((int)Command.trenutnaPozicija2, trPozicija2);

        }

        // Callback function that prints the Arduino status to the console
        void trPozicija(ReceivedCommand arguments)
        {


            poz1 = arguments.ReadInt32Arg();
            txtPozicija.BeginInvoke((MethodInvoker)delegate () { txtPozicija.Text = poz1.ToString(); });


        }

        void trPozicija2(ReceivedCommand arguments)
        {


            poz2 = arguments.ReadInt32Arg();
            txtPozicija2.BeginInvoke((MethodInvoker)delegate () { txtPozicija2.Text = poz2.ToString(); });

        }
        private void TextBox1_GotFocus(object sender, EventArgs e)
        {

        }


        public void Exit()
        {
            // Stop listening
            Inicijalizacija._cmdMessenger.StopListening();

            // Dispose Command Messenger
            Inicijalizacija._cmdMessenger.Dispose();
            Inicijalizacija._serialTransport.Dispose();

        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {

           

        }

        private void tb_Enter(object sender, EventArgs e)
        {
            selTB = (TextBox)sender;
        }

       
        private void button1_Click(object sender, EventArgs e)
        {
            timer1.Start();
            timer2.Stop();
            timer3.Stop();
            timer4.Stop();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            timer1.Stop();
            timer2.Start();
            timer3.Stop();
            timer4.Stop();
        }

        private void button3_Click(object sender, EventArgs e)
        {


        }

        private void button4_Click(object sender, EventArgs e)
        {
            timer1.Start();
            timer2.Stop();
            timer3.Stop();
            timer4.Start();
        }

        private void button8_Click_1(object sender, EventArgs e)
        {
            var command = new SendCommand((int)Command.idi);
            _cmdMessenger.SendCommand(command);
        }

       

        private void button9_Click(object sender, EventArgs e)
        {
            var command = new SendCommand((int)Command.brzina1);
            _cmdMessenger.SendCommand(command);
            textBoxBrzina.Text = "300";
        }

        private void button10_Click(object sender, EventArgs e)
        {
            var command = new SendCommand((int)Command.brzina2);
            _cmdMessenger.SendCommand(command);
            textBoxBrzina.Text = "1500";
        }

        private void button11_Click(object sender, EventArgs e)
        {
            var command = new SendCommand((int)Command.brzina3);
            _cmdMessenger.SendCommand(command);
            textBoxBrzina.Text = "3000";
        }

        private void btn_OFF_CheckedChanged(object sender, EventArgs e)
        {
            var command = new SendCommand((int)Command.paljenjeServa, false);

            _cmdMessenger.SendCommand(command);
        }

        private void btn_ON_CheckedChanged(object sender, EventArgs e)
        {
            var command = new SendCommand((int)Command.paljenjeServa, true);

            _cmdMessenger.SendCommand(command);
        }

        private void button5_Click(object sender, EventArgs e)
        {

            var command = new SendCommand((int)Command.homePozicija);
            _cmdMessenger.SendCommand(command);
        }

      
        private void textBox5_TextChanged(object sender, EventArgs e)
        {

        }

        private void button12_Click_2(object sender, EventArgs e)
        {

            servoSettings ss = new servoSettings();
            ss.Show();
        }

        private void button23_Click(object sender, EventArgs e)
        {
            int a = int.Parse(textBoxBrzina.Text);


            var command = new SendCommand((int)Command.manualBrzina, a);
            _cmdMessenger.SendCommand(command);
        }

        private void textBox7_TextChanged_1(object sender, EventArgs e)
        {

        }
        private static void delay(int Time_delay)
        {
            int i = 0;
            //  ameTir = new System.Timers.Timer();
            System.Timers.Timer _delayTimer = new System.Timers.Timer();
            _delayTimer.Interval = Time_delay;
            _delayTimer.AutoReset = false; //so that it only calls the method once
            _delayTimer.Elapsed += (s, args) => i = 1;
            _delayTimer.Start();
            while (i == 0) { };


        }

       
        private void button25_Click(object sender, EventArgs e)
        {
            var command = new SendCommand((int)Command.stani);
            _cmdMessenger.SendCommand(command);
        }

       
        private void button26_Click(object sender, EventArgs e)
        {

            var command = new SendCommand((int)Command.paljenjeServa);
            _cmdMessenger.SendCommand(command);
        }

        private void button27_Click(object sender, EventArgs e)
        {

            var command = new SendCommand((int)Command.gasenjeServa);
            _cmdMessenger.SendCommand(command);
        }

        private void button7_Click_2(object sender, EventArgs e)
        {

            string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            File.WriteAllText(path + "\\pikkukone\\" + textBox5.Text , textBox1.Text
          + Environment.NewLine + textBox2.Text
          + Environment.NewLine + textBox3.Text
          + Environment.NewLine + textBox4.Text
          );


        }

      
    
        private void button33_Click(object sender, EventArgs e)
        {
            lvKulma ss = new lvKulma();
            ss.Show();
        }

        private void button34_Click(object sender, EventArgs e)
        {
            lvKulma ss = new lvKulma();
            ss.Show();
        }

        private void button35_Click(object sender, EventArgs e)
        {

        }
        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void IvKulma_Load(object sender, EventArgs e)
        {
            FormBorderStyle = FormBorderStyle.None;
            panel1.Visible = false;
            listView1.Visible = false;

        }

        private void IvKulma_FormClosing(object sender, FormClosingEventArgs e)
        {
            Exit();
            Application.Exit();

        }

     

        private void button15_Click(object sender, EventArgs e)
        {

            selTB.SelectedText += "1";
            if (selTB != null) selTB.Focus();
        }

        private void button16_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "2";
            if (selTB != null) selTB.Focus();
        }

        private void button19_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "3";
            if (selTB != null) selTB.Focus();
        }

        private void button20_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "4";
            if (selTB != null) selTB.Focus();
        }

        private void button24_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "5";
            if (selTB != null) selTB.Focus();
        }

        private void button33_Click_1(object sender, EventArgs e)
        {
            selTB.SelectedText += "6";
            if (selTB != null) selTB.Focus();
        }

        private void button17_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "7";
            if (selTB != null) selTB.Focus();
        }

        private void button18_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "8";
            if (selTB != null) selTB.Focus();
        }

        private void button21_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "9";
            if (selTB != null) selTB.Focus();
        }

        private void button22_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "0";
            if (selTB != null) selTB.Focus();
        }

        private void button34_Click_1(object sender, EventArgs e)
        {
            string s = selTB.Text;

            if (s.Length > 1)
            {
                s = s.Substring(0, s.Length - 1);
            }
            else
            {
                s = "";
            }

            selTB.Text = s;
            if (selTB != null) selTB.Focus();
        }


        private void button1_MouseHover(object sender, EventArgs e)
        {
            button1.BackColor = Color.Lime;

        }

        private void button1_MouseLeave(object sender, EventArgs e)
        {
            button1.BackColor = Color.White;
        }

        private void button2_MouseHover(object sender, EventArgs e)
        {
            button2.BackColor = Color.Lime;
        }



        private void button4_MouseHover(object sender, EventArgs e)
        {
            button4.BackColor = Color.Lime;

        }


        private void button2_MouseLeave(object sender, EventArgs e)
        {
            button2.BackColor = Color.White;
        }



        private void button4_MouseLeave(object sender, EventArgs e)
        {
            button4.BackColor = Color.White;
        }

        private void button13_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }

      
        private void pictureBox1_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {

                var command = new SendCommand((int)Command.gore, idiGore);
                // Send command
                _cmdMessenger.SendCommand(command);
            }
            else
            {

                var command = new SendCommand((int)Command.goreStani, staniGore);
                // Send command
                _cmdMessenger.SendCommand(command);

            }


        }


        private void button36_MouseDown(object sender, MouseEventArgs e)
        {

            if (e.Button == MouseButtons.Left)
            {


                var command = new SendCommand((int)Command.dole, idiDole);

                _cmdMessenger.SendCommand(command);
            }



        }

        private void button6_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {


                var command = new SendCommand((int)Command.gore, idiGore);

                _cmdMessenger.SendCommand(command);
            }

        }

        private void button6_MouseUp_1(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {


                var command = new SendCommand((int)Command.goreStani, staniGore);

                _cmdMessenger.SendCommand(command);
            }
        }

        private void button36_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {


                var command = new SendCommand((int)Command.doleStani, staniDole);

                _cmdMessenger.SendCommand(command);
            }
        }

        private void button38_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click_1(object sender, EventArgs e)
        {
            timer1.Start();
            timer2.Stop();
            timer3.Start();
            timer4.Stop();
        }

        private void checkBox1_CheckedChanged_1(object sender, EventArgs e)
        {

        }

        private void timer1_Tick_1(object sender, EventArgs e)
        {
            try
            {

                izaberi1 = int.Parse(textBox1.Text);
                // Create command
                if (izaberi1 <= 0)
                {
                    pomjeri1 = 0;
                    pomjeri2 = 0;
                }
                else if (izaberi1 > 1000000)
                {
                    pomjeri1 = 10;
                    pomjeri2 = 0;
                }
                else
                {
                    pomjeri1 = izaberi1 / 10000;
                    pomjeri2 = izaberi1 % 10000;
                }

                int a = pomjeri1 - poz1;
                int b = pomjeri2 - poz2;
                if (Math.Abs(b / 10000) > 0)
                {
                    a = a + Math.Abs(b / 10000);
                    b = b % 10000;
                }
                poz1 = pomjeri1;
                poz2 = pomjeri2;
                var command = new SendCommand((int)Command.pozicija1, a);
                // Send command
                _cmdMessenger.SendCommand(command);
                delay(500);
                var command2 = new SendCommand((int)Command.pozicija2, b);
                // Send command
                _cmdMessenger.SendCommand(command2);
            }

            catch (Exception)
            {

            }
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            try
            {

                izaberi2 = int.Parse(textBox2.Text);
                // Create command
                if (izaberi2 <= 0)
                {
                    pomjeri1 = 0;
                    pomjeri2 = 0;
                }
                else if (izaberi2 > 1000000)
                {
                    pomjeri1 = 10;
                    pomjeri2 = 0;
                }
                else
                {
                    pomjeri1 = izaberi2 / 10000;
                    pomjeri2 = izaberi2 % 10000;
                }


                int a = pomjeri1 - poz1;
                int b = pomjeri2 - poz2;
                if (Math.Abs(b / 10000) > 0)
                {
                    a = a + Math.Abs(b / 10000);
                    b = b % 10000;
                }

                poz1 = pomjeri1;
                poz2 = pomjeri2;
                var command = new SendCommand((int)Command.pozicija1, a);
                // Send command
                _cmdMessenger.SendCommand(command);
                delay(500);
                var command2 = new SendCommand((int)Command.pozicija2, b);
                // Send command
                _cmdMessenger.SendCommand(command2);
            }
            catch (Exception)
            {

            }
        }

        private void timer4_Tick(object sender, EventArgs e)
        {

            try
            {

                izaberi4 = int.Parse(textBox4.Text);
                // Create command
                if (izaberi4 <= 0)
                {
                    pomjeri1 = 0;
                    pomjeri2 = 0;
                }
                else if (izaberi4 > 1000000)
                {
                    pomjeri1 = 10;
                    pomjeri2 = 0;
                }
                else
                {
                    pomjeri1 = izaberi4 / 10000;
                    pomjeri2 = izaberi4 % 10000;
                }


                int a = pomjeri1 - poz1;
                int b = pomjeri2 - poz2;
                if (Math.Abs(b / 10000) > 0)
                {
                    a = a + Math.Abs(b / 10000);
                    b = b % 10000;
                }



                poz1 = pomjeri1;
                poz2 = pomjeri2;
                var command = new SendCommand((int)Command.pozicija1, a);
                // Send command
                _cmdMessenger.SendCommand(command);
                delay(500);
                var command2 = new SendCommand((int)Command.pozicija2, b);
                // Send command
                _cmdMessenger.SendCommand(command2);

            }
            catch (Exception)
            {

            }


        }

        private void timer3_Tick(object sender, EventArgs e)
        {

            try
            {

                izaberi3 = int.Parse(textBox3.Text);
                // Create command
                if (izaberi3 <= 0)
                {
                    pomjeri1 = 0;
                    pomjeri2 = 0;
                }
                else if (izaberi3 > 1000000)
                {
                    pomjeri1 = 10;
                    pomjeri2 = 0;
                }
                else
                {
                    pomjeri1 = izaberi3 / 10000;
                    pomjeri2 = izaberi3 % 10000;
                }


                int a = pomjeri1 - poz1;
                int b = pomjeri2 - poz2;
                if (Math.Abs(b / 10000) > 0)
                {
                    a = a + Math.Abs(b / 10000);
                    b = b % 10000;
                }


                poz1 = pomjeri1;
                poz2 = pomjeri2;
                var command = new SendCommand((int)Command.pozicija1, a);
                // Send command
                _cmdMessenger.SendCommand(command);
                delay(500);
                var command2 = new SendCommand((int)Command.pozicija2, b);
                // Send command
                _cmdMessenger.SendCommand(command2);
            }
            catch (Exception)
            {

            }
        }

        private void button3_MouseHover(object sender, EventArgs e)
        {
            button3.BackColor = Color.Lime;
        }

        private void button3_MouseLeave(object sender, EventArgs e)
        {
            button3.BackColor = Color.White;
        }

              
        private void tasQ_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "Q";
            if (selTB != null) selTB.Focus();
        }

        private void tasW_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "W";
            if (selTB != null) selTB.Focus();
        }

        private void tasE_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "E";
            if (selTB != null) selTB.Focus();
        }

        private void tasR_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "R";
            if (selTB != null) selTB.Focus();
        }

        private void tasT_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "T";
            if (selTB != null) selTB.Focus();
        }

        private void tasY_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "Y";
            if (selTB != null) selTB.Focus();
        }

        private void tasU_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "U";
            if (selTB != null) selTB.Focus();
        }

        private void tasI_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "I";
            if (selTB != null) selTB.Focus();
        }

        private void tasO_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "O";
            if (selTB != null) selTB.Focus();
        }

        private void tasP_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "P";
            if (selTB != null) selTB.Focus();
        }

        private void tasA_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "A";
            if (selTB != null) selTB.Focus();
        }

        private void tasS_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "S";
            if (selTB != null) selTB.Focus();
        }

        private void tasD_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "D";
            if (selTB != null) selTB.Focus();
        }

        private void tasF_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "F";
            if (selTB != null) selTB.Focus();
        }

        private void tasG_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "G";
            if (selTB != null) selTB.Focus();
        }

        private void tasH_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "H";
            if (selTB != null) selTB.Focus();
        }

        private void tasJ_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "J";
            if (selTB != null) selTB.Focus();
        }

        private void tasK_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "K";
            if (selTB != null) selTB.Focus();
        }

        private void tasL_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "L";
            if (selTB != null) selTB.Focus();
        }

        private void tasZ_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "Z";
            if (selTB != null) selTB.Focus();
        }

        private void tasX_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "X";
            if (selTB != null) selTB.Focus();
        }

        private void tasC_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "C";
            if (selTB != null) selTB.Focus();
        }

        private void tasV_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "V";
            if (selTB != null) selTB.Focus();
        }

        private void tasB_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "B";
            if (selTB != null) selTB.Focus();
        }

        private void tasN_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "N";
            if (selTB != null) selTB.Focus();
        }

        private void tasM_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "M";
            if (selTB != null) selTB.Focus();
        }

        private void button29_Click_1(object sender, EventArgs e)
        {
            panel1.Visible = false;
            listView1.Visible = false;
        }

        private void tas0_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "0";
            if (selTB != null) selTB.Focus();
        }

        private void tas1_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "1";
            if (selTB != null) selTB.Focus();
        }

        private void button14_Click_2(object sender, EventArgs e)
        {
            string s = selTB.Text;

            if (s.Length > 1)
            {
                s = s.Substring(0, s.Length - 1);
            }
            else
            {
                s = "";
            }

            selTB.Text = s;
            if (selTB != null) selTB.Focus();
        }

        private void tas3_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "3";
            if (selTB != null) selTB.Focus();
        }

        private void tas2_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "2";
            if (selTB != null) selTB.Focus();
        }

        private void tas4_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "4";
            if (selTB != null) selTB.Focus();
        }

        private void tas5_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "5";
            if (selTB != null) selTB.Focus();
        }

        private void tas6_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "6";
            if (selTB != null) selTB.Focus();
        }

        private void tas7_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "7";
            if (selTB != null) selTB.Focus();
        }

        private void tas8_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "8";
            if (selTB != null) selTB.Focus();
        }

        private void tas9_Click(object sender, EventArgs e)
        {
            selTB.SelectedText += "9";
            if (selTB != null) selTB.Focus();
        }


        private void Button30_Click_1(object sender, EventArgs e)
        {
            selTB.SelectedText += "_";
            if (selTB != null) selTB.Focus();
        }

        private void textBox5_MouseHover(object sender, EventArgs e)
        {


            listView1.Clear();
            listView1.Visible = false;
            panel1.Visible = true;

          

        }

        private void lvKulma_MouseHover(object sender, EventArgs e)
        {
            listView1.Visible = false;
            panel1.Visible = false;
        }

        private void button31_Click(object sender, EventArgs e)
        {

          
                try
                {
                    string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                //load the values:

                if (File.Exists(path + "\\pikkukone\\" + textBox5.Text ))

                {
                                              
                     string[] alllines = System.IO.File.ReadAllLines
                     (path + "\\pikkukone\\" + textBox5.Text );

                     textBox1.Text = alllines[0];
                     textBox2.Text = alllines[1];
                     textBox3.Text = alllines[2];
                     textBox4.Text = alllines[3];
                     

                }

                else
                {
                    MessageBox.Show("Not found");
                }

                }
                catch (Exception)
                {
                    
                }

                panel1.Visible = false;
                listView1.Visible = false;

        }

        private void button30_Click(object sender, EventArgs e)
        {
           

        }
        private void listView1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listView1.SelectedItems.Count > 0)
            {
                ListViewItem item = listView1.SelectedItems[0];
                textBox5.Text = item.SubItems[0].Text;

            }
            else
            {
                textBox5.Text = string.Empty;
            }
        }

        private void textBox5_TextChanged_1(object sender, EventArgs e)
        {

        }

        private void button28_Click(object sender, EventArgs e)
        {
            listView1.Clear();
            listView1.Visible = true;
            panel1.Visible = true;

            try
            {
                string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                //load the values:
                string a = (path + "\\pikkukone\\");
                DirectoryInfo di = new DirectoryInfo(a);
                FileInfo[] rgFiles = di.GetFiles("*.*"); // cita sve filove txt,jpg,exe itd..
                foreach (FileInfo fi in rgFiles)
                {

                    listView1.Items.Add(fi.Name);
                }

            }
            catch (Exception)
            {

            }

        }

    }
}


    
        
   

    



    







